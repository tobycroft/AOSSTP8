<?php

namespace app\v1\captcha\controller;

use app\v1\captcha\model\PrintUserModel;
use app\v1\captcha\utils\Captcha;
use app\v1\image\controller\create;
use Input;
use think\Config;
use think\Response;
use think\Session;

class text extends create
{

    protected string $ident;

    public function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub
        $this->ident = Input::Post('ident');
    }


    public function chinese()
    {
        $config = [
            'length' => 2,
            'codeSet' => '0123456789',
            'expire' => 1800,
            'useZh' => true,
            'math' => false,
            'useImgBg' => false,
            'fontSize' => 25,
            'useCurve' => true,
            'useNoise' => true,
            'fontttf' => '',
            'bg' => [243, 251, 254],
            'imageH' => 0,
            'imageW' => 0,
        ];
        $con = new Config();
        $con->set($config, 'captcha');

        $sess = new Session($this->app);
        $capt = new Captcha($con, $sess);
        $create = $capt->create();
        PrintUserModel::create([
            'ident' => $this->ident,
            'code' => $capt->question,
            'hash' => $capt->hash,
            'type' => 'math',
        ]);
        return $create;
    }

    public function number()
    {
        $config = [
            'length' => 4,
            'codeSet' => '0123456789',
            'expire' => 1800,
            'useZh' => false,
            'math' => false,
            'useImgBg' => false,
            'fontSize' => 25,
            'useCurve' => false,
            'useNoise' => true,
            'fontttf' => '',
            'bg' => [243, 251, 254],
            'imageH' => 0,
            'imageW' => 0,
        ];
        return $this->Generated($config);
    }

    public function text()
    {
        $config = [
            'length' => 4,
            'codeSet' => '0123456789QWERTYUIOPASDFGHJKLZXCVBNM',
            'expire' => 1800,
            'useZh' => false,
            'math' => false,
            'useImgBg' => false,
            'fontSize' => 25,
            'useCurve' => false,
            'useNoise' => true,
            'fontttf' => '',
            'bg' => [243, 251, 254],
            'imageH' => 0,
            'imageW' => 0,
        ];
        return $this->Generated($config);
    }

    public function math()
    {
        $config = [
            'length' => 4,
            'codeSet' => '0123456789',
            'expire' => 1800,
            'useZh' => false,
            'math' => true,
            'useImgBg' => false,
            'fontSize' => 25,
            'useCurve' => false,
            'useNoise' => true,
            'fontttf' => '',
            'bg' => [243, 251, 254],
            'imageH' => 0,
            'imageW' => 0,
        ];
        $con = new Config();
        $con->set($config, "captcha");

        $sess = new Session($this->app);
        $capt = new Captcha($con, $sess);
        $create = $capt->create();
        PrintUserModel::create([
            'ident' => $this->ident,
            "code" => $capt->key,
            "hash" => $capt->hash,
            "type" => "math",
        ]);
        return $create;
    }

    /**
     * @param array $config
     * @return Response
     */
    private function Generated(array $config): Response
    {
        $con = new Config();
        $con->set($config, "captcha");

        $sess = new Session($this->app);
        $capt = new Captcha($con, $sess);
        $create = $capt->create();
        PrintUserModel::create([
            "ident" => $this->ident,
            "code" => $capt->question,
            "hash" => $capt->hash,
            "type" => "math",
        ]);
        return $create;
    }
}